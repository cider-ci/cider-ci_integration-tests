jobs:
  Integration-Tests:
    description: |
      This job must be run from the master project Cider-CI!

    run-on:
    - type: branch
      include-match: ^.*$

    context:

      _cider-ci_generate-tasks:
        include-match: spec/.*_spec.rb

#      tasks:
#        isolated_env_test:
#          environment-variables:
#            CIDER_CI_TASK_FILE: spec/features/executor/env_vars_spec.rb
#
      script-defaults:
        timeout: 300

      task-defaults:

        traits:
          bash: true
          curl: true
          git: true
          leiningen: true
          linux: true
          maven: true
          maven3: true
          openjdk: true
          postgresql: true
          rbenv: true
          ruby: true

        git-options:
          submodules:
            clone: True
            timeout: 60

        max-auto-trials: 3

        trial-attachments:
          screenshots:
            glob: 'integration-tests/tmp/*.png'
            content-type: image/png
          builder-logs:
            glob: 'builder/log/*.log'
            content-type: text/plain
          executor-logs:
            glob: 'executor/log/*.log'
            content-type: text/plain
          dispatcher-logs:
            glob: 'dispatcher/log/*.log'
            content-type: text/plain
          repository-logs:
            glob: 'repository/log/*.log'
            content-type: text/plain
          storage-logs:
            glob: 'storage/log/*.log'
            content-type: text/plain
          ui-logs:
            glob: 'user-interface/log/*.log'
            content-type: text/plain
          config:
            glob: 'config/*.yml'
            content-type: text/yaml
          executor-config:
            glob: 'executor/config/*.yml'
            content-type: text/yaml

        environment-variables:
          RAILS_ENV: test

        ports:
          XVNC_PORT:
            inet_address: "localhost"
            min: 5900
            max: 5999
          EXECUTOR_HTTP_PORT:
            inet_address: "localhost"
            min: 8100
            max: 8799
          EXECUTOR_HTTPS_PORT:
            inet_address: "localhost"
            min: 8100
            max: 8799
          REVERSE_PROXY_HTTP_PORT:
            inet_address: "localhost"
            min: 8100
            max: 8799
          API_HTTP_PORT:
            inet_address: "localhost"
            min: 8100
            max: 8799
          BUILDER_HTTP_PORT:
            inet_address: "localhost"
            min: 8100
            max: 8799
          DISPATCHER_HTTP_PORT:
            inet_address: "localhost"
            min: 8100
            max: 8799
          REPOSITORY_HTTP_PORT:
            inet_address: "localhost"
            min: 8100
            max: 8799
          STORAGE_HTTP_PORT:
            inet_address: "localhost"
            min: 8100
            max: 8799
          UI_HTTP_PORT:
            inet_address: "localhost"
            min: 8100
            max: 8799

        scripts:

      ### executor ##############################################

          configure-executor:
            body: |
              #!/usr/bin/env ruby
              require 'yaml'
              config = YAML.load_file 'executor/config/config_default.yml'
              config['http']['port']= Integer(ENV['EXECUTOR_HTTP_PORT'])
              config['http']['ssl-port']= Integer(ENV['EXECUTOR_HTTPS_PORT'])
              config['nrepl']['enabled']=false
              File.open('executor/config/config.yml','w') { |file| file.write config.to_yaml }
              File.open('executor/config/traits.yml','w') { |file| file.write ["bash", "linux"].to_yaml }

          run-executor:
            body: cd executor && lein trampoline run
            start-when:
            - script: configure-executor
            terminate-when:
            - script: shutdown
              states: [aborted, passed, failed, skipped]

          executor-is-running:
            body: until curl --silent --fail --user 35cff40c-b4f8-4ca3-9217-d49c9c35f375:90b796aca99df1a74b172f3adee6f170fff3ea4e -I http://localhost:${EXECUTOR_HTTP_PORT}/hello ; do sleep 1; done
            start-when:
            - script: run-executor
              states: [executing]

      ### configure services ####################################

          configure-database:
            body: |
              #!/usr/bin/env ruby
              require 'yaml'
              config = \
                { 'test' =>
                  { 'adapter' => 'postgresql',
                    'encoding' => 'unicode',
                    'host' => 'localhost',
                    'pool' => 3,
                    'username' => ENV['PGUSER'],
                    'password' =>  ENV['PGPASSWORD'],
                    'database' => "cider-ci_test_#{ENV['CIDER_CI_TRIAL_ID']}"}}
              File.open('user-interface/config/database.yml','w') { |file| file.write config.to_yaml }


          configure:
            body: |
              #!/usr/bin/env ruby
              require 'yaml'
              config = YAML.load_file 'config/config_default.yml'
              # database
              config['database']['user']= ENV['PGUSER']
              config['database']['password']= ENV['PGPASSWORD']
              config['database']['subname']= "//localhost:5432/cider-ci_test_#{ENV['CIDER_CI_TRIAL_ID']}"
              # messaging
              config['messaging']['connection']['vhost']= "cider-ci_test_#{ENV['CIDER_CI_TRIAL_ID']}"
              config['messaging']['connection']['username']= ENV['RABBITMQ_USER']
              config['messaging']['connection']['password']= ENV['RABBITMQ_PASSWORD']
              # reverse-proxy
              config['server_base_url']= "http://localhost:#{ENV['REVERSE_PROXY_HTTP_PORT']}"
              config['reverse_proxy']['http']['port']= Integer(ENV['REVERSE_PROXY_HTTP_PORT'])
              config['reverse_proxy']['nrepl']['enabled']=false
              # api
              config['services']['api']['http']['port']= Integer(ENV['API_HTTP_PORT'])
              config['services']['api']['nrepl']['enabled']= false
              # builder
              config['services']['builder']['http']['port']= Integer(ENV['BUILDER_HTTP_PORT'])
              config['services']['builder']['nrepl']['enabled']= false
              # dispatcher
              config['services']['dispatcher']['http']['port']= Integer(ENV['DISPATCHER_HTTP_PORT'])
              config['services']['dispatcher']['nrepl']['enabled']= false
              # repository
              config['services']['repository']['http']['port']= Integer(ENV['REPOSITORY_HTTP_PORT'])
              config['services']['repository']['nrepl']['enabled']= false
              # storage
              config['services']['storage']['http']['port']= Integer(ENV['STORAGE_HTTP_PORT'])
              config['services']['storage']['nrepl']['enabled']= false
              # ui
              config['services']['ui']['http']['port']= Integer(ENV['UI_HTTP_PORT'])
              #
              File.open('config/config.yml','w') { |file| file.write config.to_yaml }


      ###########################################################

          run-reverse-proxy:
            timeout: 600
            body: cd reverse-proxy && lein trampoline run
            start-when:
            - script: configure
            terminate-when:
            - script: shutdown
              states: [aborted, passed, failed, skipped]

          create-rabbitmq-vhost:
            body: |
              curl --fail --silent --include --user "$RABBITMQ_USER:$RABBITMQ_PASSWORD" \
                -H "content-type:application/json" \
                -XPUT "http://localhost:${RABBITMQ_MANAGEMENT_PORT}/api/vhosts/cider-ci_test_${CIDER_CI_TRIAL_ID}" \
              &&  \
              curl --fail --silent --user "$RABBITMQ_USER:$RABBITMQ_PASSWORD" \
                -H "content-type:application/json" \
                "http://localhost:${RABBITMQ_MANAGEMENT_PORT}/api/vhosts/" | python -m json.tool \
              &&  \
              curl --fail --silent --include --user "$RABBITMQ_USER:$RABBITMQ_PASSWORD" \
                -H "content-type:application/json" \
                -XPUT "http://localhost:${RABBITMQ_MANAGEMENT_PORT}/api/permissions/cider-ci_test_${CIDER_CI_TRIAL_ID}/${RABBITMQ_USER}" \
                -d '{"scope":"client","configure":".*","write":".*","read":".*"}'

          create-database:
            body: cd user-interface && bundle exec rake db:reset db:pg:truncate_tables
            start-when:
            - script: bundle-ui
            - script: configure-database

      ### run services ##########################################

          delay-bootstorm:
            exclusive-executor-resource: bootstorm
            body: sleep 10
            start-when:
            - script: create-database
            - script: start-vnc
            - script: bundle
            - script: bundle-ui
            - script: create-rabbitmq-vhost

          run-api: &run-service-default
            body: cd api && lein trampoline run
            start-when:
            - script: delay-bootstorm
              states: [executing, passed]
            - script: create-database
            - script: create-rabbitmq-vhost
            terminate-when:
            - script: shutdown
              states: [aborted, passed, failed, skipped]

          api-is-running:
            body: until curl --silent --fail --user x:secret -I  http://localhost:${API_HTTP_PORT}/cider-ci/api/status; do sleep 1; done
            start-when:
            - script: run-api
              states: [executing]


          run-builder:
            <<: *run-service-default
            body: cd builder && lein trampoline run

          builder-is-running:
            body: until curl --silent --fail --user x:secret -I  http://localhost:${BUILDER_HTTP_PORT}/cider-ci/builder/status; do sleep 1; done
            start-when:
            - script: run-builder
              states: [executing]


          run-dispatcher:
            <<: *run-service-default
            body: cd dispatcher && lein trampoline run

          dispatcher-is-running:
            body: until curl --silent --fail --user x:secret -I  http://localhost:${DISPATCHER_HTTP_PORT}/cider-ci/dispatcher/status; do sleep 1; done
            start-when:
            - script: run-dispatcher
              states: [executing]


          run-repository:
            <<: *run-service-default
            body: cd repository && lein trampoline run

          repository-is-running:
            body: until curl --silent --fail --user x:secret -I  http://localhost:${REPOSITORY_HTTP_PORT}/cider-ci/repositories/status; do sleep 1; done
            start-when:
            - script: run-repository
              states: [executing]


          run-storage:
            <<: *run-service-default
            body: cd storage && lein trampoline run

          storage-is-running:
            body: until curl --silent --fail --user x:secret -I  http://localhost:${STORAGE_HTTP_PORT}/cider-ci/storage/status; do sleep 1; done
            start-when:
            - script: run-storage
              states: [executing]

      ### UI ####################################################

          build-ui-js:
            body: cd user-interface && npm run build

          bundle-ui:
            exclusive-executor-resource: bundler
            body: cd user-interface && bundle

          run-ui:
            <<: *run-service-default
            body: cd user-interface && bundle exec rails s -p  ${UI_HTTP_PORT}
            timeout: 600
            start-when:
            - script: build-ui-js
            - script: bundle-ui
            - script: create-database
            - script: create-rabbitmq-vhost

          ui-is-running:
            body: until curl --silent --fail --user x:secret -I  http://localhost:${UI_HTTP_PORT}/cider-ci/ui/public; do sleep 1; done
            start-when:
            - script: run-ui
              states: [executing]

      ### the demo repo must not reference objects ##############

          repack-demo-repo:
            body: cd demo-project-bash && git repack -a

      ### test ##################################################

          bundle:
            exclusive-executor-resource: bundler
            body: cd integration-tests && bundle

          start-vnc:
            body: tightvncserver ":$XVNC_PORT"  -geometry 1024x768 -rfbport "$XVNC_PORT"  -interface '0.0.0.0'

          test:
            body: |
              export DISPLAY=":$XVNC_PORT" \
              && cd integration-tests \
              && bundle exec rspec $CIDER_CI_TASK_FILE
            start-when:
            - script: repack-demo-repo
            - script: start-vnc
            - script: bundle
            - script: bundle-ui
            - script: executor-is-running
            - script: api-is-running
            - script: builder-is-running
            - script: dispatcher-is-running
            - script: repository-is-running
            - script: storage-is-running
            - script: ui-is-running

          shutdown-delay:
            start-when:
            - script: test
              states: [aborted, passed, failed, skipped]
            body: |
              if [ ! -z ${SHUTDOWN_DELAY} ]; then
                sleep ${SHUTDOWN_DELAY}
              fi


      ### shutdown & cleanup ####################################

          shutdown:
            body: |
              curl -X POST --silent --fail --user 35cff40c-b4f8-4ca3-9217-d49c9c35f375:90b796aca99df1a74b172f3adee6f170fff3ea4e -I http://localhost:${EXECUTOR_HTTP_PORT}/shutdown
              curl -X POST --silent --fail --user x:secret -I  http://localhost:${API_HTTP_PORT}/cider-ci/api/shutdown
              curl -X POST --silent --fail --user x:secret -I  http://localhost:${BUILDER_HTTP_PORT}/cider-ci/builder/shutdown
              curl -X POST --silent --fail --user x:secret -I  http://localhost:${DISPATCHER_HTTP_PORT}/cider-ci/dispatcher/shutdown
              curl -X POST --silent --fail --user x:secret -I  http://localhost:${REPOSITORY_HTTP_PORT}/cider-ci/repositories/shutdown
              curl -X POST --silent --fail --user x:secret -I  http://localhost:${STORAGE_HTTP_PORT}/cider-ci/storage/shutdown
              curl -X POST --silent --fail --user x:secret -I  http://localhost:${REVERSE_PROXY_HTTP_PORT}/shutdown
              kill -INT $(lsof -t -wni tcp:${UI_HTTP_PORT})
              sleep 5
            start-when:
              - script: shutdown-delay
                states: [aborted, passed, failed, skipped]


          delete-rabbitmq-vhost:
            body: |
              curl -i -u "$RABBITMQ_USER:$RABBITMQ_PASSWORD" -H "content-type:application/json" \
                -XDELETE "http://localhost:${RABBITMQ_MANAGEMENT_PORT}/api/vhosts/cider-ci_test_${CIDER_CI_TRIAL_ID}"
            ignore-state: true
            start-when:
            - script: shutdown
              states: [aborted, passed, failed, skipped]

          delete-database:
            body: |
              cd user-interface \
              && bundle exec rake db:pg:terminate_connections \
              && bundle exec rake db:pg:terminate_connections db:drop
            ignore-state: true
            start-when:
            - script: shutdown
              states: [aborted, passed, failed, skipped]

          stop-vnc:
            body: tightvncserver -kill ":$XVNC_PORT" -clean
            ignore-state: true
            start-when:
            - script: shutdown
              states: [aborted, passed, failed, skipped]


