task-defaults:

  git-options: 
    submodules: 
      clone: True 
      timeout: 60

  max-auto-trials: 1

  trial_attachments:
    screenshots:
      glob: 'integration-tests/tmp/capybara/*.png'
      content-type: image/png

  environment-variables:
    RAILS_ENV: test

  ports: 
    DISPLAY:
      inet_address: "localhost"
      min: 5900
      max: 5999
    REVERSE_PROXY_HTTP_PORT: 
      inet_address: "localhost"
      min: 8100
      max: 8799
    API_HTTP_PORT: 
      inet_address: "localhost"
      min: 8100
      max: 8799
    BUILDER_HTTP_PORT: 
      inet_address: "localhost"
      min: 8100
      max: 8799
    DISPATCHER_HTTP_PORT: 
      inet_address: "localhost"
      min: 8100
      max: 8799
    REPOSITORY_HTTP_PORT: 
      inet_address: "localhost"
      min: 8100
      max: 8799
    STORAGE_HTTP_PORT: 
      inet_address: "localhost"
      min: 8100
      max: 8799
    UI_HTTP_PORT: 
      inet_address: "localhost"
      min: 8100
      max: 8799

  scripts:

    start-vnc:
      body: tightvncserver ":$DISPLAY"  -geometry 1024x768 -rfbport "$DISPLAY"  -interface '127.0.0.1'

    configure-database: 
      body: |
        #!/usr/bin/env ruby
        require 'yaml'
        config = \
          { test: 
            { adapter: 'postgresql',
              encoding: 'unicode',
              host: 'localhost',
              pool: 3,
              username: ENV['PGUSER'],
              password: ENV['PGPASSWORD'],
              database: "cider-ci_test_#{ENV['CIDER_CI_TRIAL_ID']}"}}
        File.open('user-interface/config/database.yml','w') { |file| file.write config.to_yaml }


    configure: 
      body: |
        #!/usr/bin/env ruby
        require 'yaml'
        config = YAML.load_file 'config/config_default.yml'
        # database
        config['database']['user']= ENV['PGUSER']
        config['database']['user']= ENV['PGPASSWORD']
        config['database']['subname']= "//localhost:5432/#cider-ci_test_#{ENV['CIDER_CI_TRIAL_ID']}"
        # messaging
        config['messaging']['connection']['vhost']= "cider-ci_test_#{ENV['CIDER_CI_TRAIL_ID']}"
        config['messaging']['connection']['username']= ENV['RABBIMQ_USER']
        config['messaging']['connection']['password']= ENV['RABBIMQ_PASSWORD']
        # reverse-proxy
        config['server_base_url']= "http://localhost:#{ENV['REVERSE_PROXY_HTTP_PORT']}"
        config['reverse_proxy']['http']['port']=ENV['REVERSE_PROXY_HTTP_PORT']
        config['reverse_proxy']['nrepl']['enabled']=false 
        # api
        config['services']['api']['http']['port']= ENV['API_HTTP_PORT']
        config['services']['api']['nrepl']['enabled']= false
        # builder
        config['services']['builder']['http']['port']= ENV['BUILDER_HTTP_PORT']
        config['services']['builder']['nrepl']['enabled']= false
        # dispatcher
        config['services']['dispatcher']['http']['port']= ENV['DISPATCHER_HTTP_PORT']
        config['services']['dispatcher']['nrepl']['enabled']= false
        # repository
        config['services']['repository']['http']['port']= ENV['REPOSITORY_HTTP_PORT']
        config['services']['repository']['nrepl']['enabled']= false
        # storage
        config['services']['storage']['http']['port']= ENV['STORAGE_HTTP_PORT']
        config['services']['storage']['nrepl']['enabled']= false
        # ui
        config['services']['ui']['http']['port']= ENV['UI_HTTP_PORT']
      
        File.open('config/config.yml','w') { |file| file.write config.to_yaml }


    create-rabbitmq-vhost: 
      body: |
        curl -i -u "$RABBITMQ_USER:$RABBITMQ_PASSWORD" -H "content-type:application/json" \
          -XPUT "http://localhost:55672/api/vhosts/cider-ci_test_${CIDER_CI_TRAIL_ID}" \
        &&  \
        curl -i -u "$RABBITMQ_USER:$RABBITMQ_PASSWORD" -H "content-type:application/json" \
          -XPUT "http://localhost:55672/api/permisions/cider-ci_test_${CIDER_CI_TRAIL_ID}/${RABBITMQ_USER}" \
          -d '{"scope":"client","configure":".*","write":".*","read":".*"}'

    bundle-ui:
      body: cd user-interface && bundle

    create-database:
      body: cd user-interface && bundle exec rake db:reset 
      dependencies:
      - type: script
        name: configure-database
        states: [passed]
      - type: script
        name: bundle-ui
        states: [passed]

    run-reverse-proxy:
      body: cd reverse-proxy && lein trampoline run
      dependencies:
      - type: script
        name: configure
        states: [passed]
      terminators:
      - type: script
        name: test
        states: [passed, failed, skipped]

    run-api: 
      body: cd api && lein trampoline run
      dependencies:
      - type: script
        name: configure
        states: [passed]
      - type: script
        name: create-rabbitmq-vhost
        states: [passed]
      - type: script
        name: create-database
        states: [passed]
      terminators:
      - type: script
        name: test
        states: [passed, failed, skipped]

    run-builder: 
      body: cd builder && lein trampoline run
      dependencies:
      - type: script
        name: configure
        states: [passed]
      - type: script
        name: create-rabbitmq-vhost
        states: [passed]
      - type: script
        name: create-database
        states: [passed]
      terminators:
      - type: script
        name: test
        states: [passed, failed, skipped]

    run-dispatcher: 
      body: cd dispatcher && lein trampoline run
      dependencies:
      - type: script
        name: configure
        states: [passed]
      - type: script
        name: create-rabbitmq-vhost
        states: [passed]
      - type: script
        name: create-database
        states: [passed]
      terminators:
      - type: script
        name: test
        states: [passed, failed, skipped]

    run-repository: 
      body: cd repository && lein trampoline run
      dependencies:
      - type: script
        name: configure
        states: [passed]
      - type: script
        name: create-rabbitmq-vhost
        states: [passed]
      - type: script
        name: create-database
        states: [passed]
      terminators:
      - type: script
        name: test
        states: [passed, failed, skipped]

    run-storage: 
      body: cd storage && lein trampoline run
      dependencies:
      - type: script
        name: configure
        states: [passed]
      - type: script
        name: create-rabbitmq-vhost
        states: [passed]
      - type: script
        name: create-database
        states: [passed]
      terminators:
      - type: script
        name: test
        states: [passed, failed, skipped]

    run-ui:
      body: cd user-interface && bundle exec rails s -p  ${UI_HTTP_PORT}
      dependencies:
      - type: script
        name: bundle-ui
        states: [passed]
      - type: script
        name: create-database 
        states: [passed]
      - type: script
        name: create-rabbitmq-vhost
        states: [passed]
      terminators:
      - type: script
        name: test
        states: [passed, failed, skipped]
      ignore-state: true

    bundle: 
      body: cd integration-tests && bundle

    test:
      body: cd integration-tests && bundle exec rspec $CIDER_CI_TASK_FILE
      dependencies:
      - type: script
        name: bundle
        states: [passed]
      - type: script
        name: create-rabbitmq-vhost
        states: [passed]

    delete-rabbitmq-vhost: 
      body: |
        curl -i -u "$RABBITMQ_USER:$RABBITMQ_PASSWORD" -H "content-type:application/json" \
          -XDELETE "http://localhost:55672/api/vhosts/cider-ci_test_${CIDER_CI_TRAIL_ID}" 
      ignore-state: true
      dependencies:
      - type: script
        name: test
        states: [passed, failed, skipped]

    delete-database: 
      body: |
        cd user-interface \
        && bundle exec rake db:pg:terminate_connections db:drop
      ignore-state: true
      dependencies:
      - type: script
        name: test
        states: [passed, failed, skipped]

    stop-vnc:
      type: post_process
      body: tightvncserver -kill ":$DISPLAY" -clean
      dependencies:
      - type: script
        name: test
        states: [passed, failed, skipped]

tasks:
  spec/features/attachments_spec.rb:
    environment-variables:
      CIDER_CI_TASK_FILE: spec/features/attachments_spec.rb

#_cider-ci_generate-tasks: 
#  include-match: spec/.*_spec.rb

