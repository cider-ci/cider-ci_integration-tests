task-defaults:

  git-options: 
    submodules: 
      clone: True 
      timeout: 60

  max-auto-trials: 1

  trial_attachments:
    screenshots:
      glob: 'integration-tests/tmp/capybara/*.png'
      content-type: image/png
    logs:
      glob: '**/*.log'
      content-type: text/plain
    configs: 
      glob: '**/*.yml'
      content-type: text/yaml

  environment-variables:
    RAILS_ENV: test

  ports: 
    DISPLAY:
      inet_address: "localhost"
      min: 5900
      max: 5999
    REVERSE_PROXY_HTTP_PORT: 
      inet_address: "localhost"
      min: 8100
      max: 8799
    API_HTTP_PORT: 
      inet_address: "localhost"
      min: 8100
      max: 8799
    BUILDER_HTTP_PORT: 
      inet_address: "localhost"
      min: 8100
      max: 8799
    DISPATCHER_HTTP_PORT: 
      inet_address: "localhost"
      min: 8100
      max: 8799
    REPOSITORY_HTTP_PORT: 
      inet_address: "localhost"
      min: 8100
      max: 8799
    STORAGE_HTTP_PORT: 
      inet_address: "localhost"
      min: 8100
      max: 8799
    UI_HTTP_PORT: 
      inet_address: "localhost"
      min: 8100
      max: 8799

  scripts: 

    configure-database: 
      body: |
        #!/usr/bin/env ruby
        require 'yaml'
        config = \
          { 'test' => 
            { 'adapter' => 'postgresql',
              'encoding' => 'unicode',
              'host' => 'localhost',
              'pool' => 3,
              'username' => ENV['PGUSER'],
              'password' =>  ENV['PGPASSWORD'],
              'database' => "cider-ci_test_#{ENV['CIDER_CI_TRIAL_ID']}"}}
        File.open('user-interface/config/database.yml','w') { |file| file.write config.to_yaml }

    configure: 
      body: |
        #!/usr/bin/env ruby
        require 'yaml'
        config = YAML.load_file 'config/config_default.yml'
        # database
        config['database']['user']= ENV['PGUSER']
        config['database']['password']= ENV['PGPASSWORD']
        config['database']['subname']= "//localhost:5432/cider-ci_test_#{ENV['CIDER_CI_TRIAL_ID']}"
        # messaging
        config['messaging']['connection']['vhost']= "cider-ci_test_#{ENV['CIDER_CI_TRIAL_ID']}"
        config['messaging']['connection']['username']= ENV['RABBITMQ_USER']
        config['messaging']['connection']['password']= ENV['RABBITMQ_PASSWORD']
        # reverse-proxy
        config['server_base_url']= "http://localhost:#{ENV['REVERSE_PROXY_HTTP_PORT']}"
        config['reverse_proxy']['http']['port']= Integer(ENV['REVERSE_PROXY_HTTP_PORT'])
        config['reverse_proxy']['nrepl']['enabled']=false 
        # api
        config['services']['api']['http']['port']= Integer(ENV['API_HTTP_PORT'])
        config['services']['api']['nrepl']['enabled']= false
        # builder
        config['services']['builder']['http']['port']= Integer(ENV['BUILDER_HTTP_PORT'])
        config['services']['builder']['nrepl']['enabled']= false
        # dispatcher
        config['services']['dispatcher']['http']['port']= Integer(ENV['DISPATCHER_HTTP_PORT'])
        config['services']['dispatcher']['nrepl']['enabled']= false
        # repository
        config['services']['repository']['http']['port']= Integer(ENV['REPOSITORY_HTTP_PORT'])
        config['services']['repository']['nrepl']['enabled']= false
        # storage
        config['services']['storage']['http']['port']= Integer(ENV['STORAGE_HTTP_PORT'])
        config['services']['storage']['nrepl']['enabled']= false
        # ui
        config['services']['ui']['http']['port']= Integer(ENV['UI_HTTP_PORT'])
        # 
        File.open('config/config.yml','w') { |file| file.write config.to_yaml }

    build-ui-js:
      body: cd user-interface && npm run build

    run-reverse-proxy:
      body: cd reverse-proxy && lein run
      start-when:
      - script: configure
      terminate-when:
      - script: test
        states: [aborted, passed, failed, skipped]
      ignore-state: true

    create-rabbitmq-vhost: 
      body: |
        curl --fail --silent --include --user "$RABBITMQ_USER:$RABBITMQ_PASSWORD" \
          -H "content-type:application/json" \
          -XPUT "http://localhost:${RABBITMQ_MANAGEMENT_PORT}/api/vhosts/cider-ci_test_${CIDER_CI_TRIAL_ID}" \
        &&  \
        curl --fail --silent --user "$RABBITMQ_USER:$RABBITMQ_PASSWORD" \
          -H "content-type:application/json" \
          "http://localhost:${RABBITMQ_MANAGEMENT_PORT}/api/vhosts/" | python -m json.tool \
        &&  \
        curl --fail --silent --include --user "$RABBITMQ_USER:$RABBITMQ_PASSWORD" \
          -H "content-type:application/json" \
          -XPUT "http://localhost:${RABBITMQ_MANAGEMENT_PORT}/api/permissions/cider-ci_test_${CIDER_CI_TRIAL_ID}/${RABBITMQ_USER}" \
          -d '{"scope":"client","configure":".*","write":".*","read":".*"}'

    bundle: 
      exclusive-executor-resource: bundler
      body: cd integration-tests && bundle

    bundle-ui:
      exclusive-executor-resource: bundler
      body: cd user-interface && bundle

    start-vnc:
      body: tightvncserver ":$DISPLAY"  -geometry 1024x768 -rfbport "$DISPLAY"  -interface '127.0.0.1'

    create-database:
      body: cd user-interface && bundle exec rake db:reset 
      start-when:
      - script: bundle-ui
      - script: configure-database

    delay-bootstorm:
      exclusive-executor-resource: bootstorm
      body: sleep 30
      start-when: 
      - script: create-database
      - script: start-vnc
      - script: bundle
      - script: bundle-ui
      - script: create-rabbitmq-vhost

    run-api: &run-service-default
      body: cd api && lein trampoline run
      start-when:
      - script: delay-bootstorm
        states: [executing, passed]
      - script: create-database
      - script: create-rabbitmq-vhost
      terminate-when:
      - script: test
        states: [aborted, passed, failed, skipped]
      ignore-state: true

    api-is-running:
      body: until curl --silent --fail --user x:secret -I  http://localhost:${API_HTTP_PORT}/cider-ci/api/status; do sleep 1; done
      start-when:
      - script: run-api
        states: [executing]


    run-builder: 
      <<: *run-service-default 
      body: cd builder && lein trampoline run

    builder-is-running:
      body: until curl --silent --fail --user x:secret -I  http://localhost:${BUILDER_HTTP_PORT}/cider-ci/builder/status; do sleep 1; done
      start-when:
      - script: run-builder
        states: [executing]


    run-dispatcher: 
      <<: *run-service-default 
      body: cd dispatcher && lein trampoline run

    dispatcher-is-running:
      body: until curl --silent --fail --user x:secret -I  http://localhost:${DISPATCHER_HTTP_PORT}/cider-ci/dispatcher/status; do sleep 1; done
      start-when:
      - script: run-dispatcher
        states: [executing]


    run-repository: 
      <<: *run-service-default 
      body: cd repository && lein trampoline run

    repository-is-running:
      body: until curl --silent --fail --user x:secret -I  http://localhost:${REPOSITORY_HTTP_PORT}/cider-ci/repositories/status; do sleep 1; done
      start-when:
      - script: run-repository
        states: [executing]


    run-storage: 
      <<: *run-service-default 
      body: cd storage && lein trampoline run

    storage-is-running:
      body: until curl --silent --fail --user x:secret -I  http://localhost:${STORAGE_HTTP_PORT}/cider-ci/storage/status; do sleep 1; done
      start-when:
      - script: run-storage
        states: [executing]


    run-ui:
      <<: *run-service-default 
      body: cd user-interface && bundle exec rails s -p  ${UI_HTTP_PORT}
      start-when:
      - script: build-ui-js
      - script: bundle-ui
      - script: create-database
      - script: create-rabbitmq-vhost

    ui-is-running:
      body: until curl --silent --fail --user x:secret -I  http://localhost:${UI_HTTP_PORT}/cider-ci/ui/public; do sleep 1; done
      start-when:
      - script: run-ui
        states: [executing]


    test: 
      body: sleep 10 && exit 1
      start-when: 
      - script: start-vnc
      - script: bundle
      - script: bundle-ui
      - script: api-is-running
      - script: builder-is-running
      - script: dispatcher-is-running
      - script: repository-is-running
      - script: storage-is-running
      - script: ui-is-running

#
#    test:
#      body: cd integration-tests && bundle exec rspec $CIDER_CI_TASK_FILE
#      dependencies:
#      - type: script
#        name: bundle
#        states: [passed]
#      - type: script
#        name: create-rabbitmq-vhost
#        states: [passed]
#
#    delete-rabbitmq-vhost: 
#      body: |
#        curl -i -u "$RABBITMQ_USER:$RABBITMQ_PASSWORD" -H "content-type:application/json" \
#          -XDELETE "http://localhost:55672/api/vhosts/cider-ci_test_${CIDER_CI_TRAIL_ID}" 
#      ignore-state: true
#      dependencies:
#      - type: script
#        name: test
#        states: [passed, failed, skipped]
#
#    delete-database: 
#      body: |
#        cd user-interface \
#        && bundle exec rake db:pg:terminate_connections db:drop
#      ignore-state: true
#      dependencies:
#      - type: script
#        name: test
#        states: [passed, failed, skipped]
#
#    stop-vnc:
#      type: post_process
#      body: tightvncserver -kill ":$DISPLAY" -clean
#      dependencies:
#      - type: script
#        name: test
#        states: [passed, failed, skipped]
#
tasks:
  spec/features/attachments_spec.rb:
    environment-variables:
      CIDER_CI_TASK_FILE: spec/features/attachments_spec.rb

##_cider-ci_generate-tasks: 
##  include-match: spec/.*_spec.rb
#
